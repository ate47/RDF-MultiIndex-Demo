@prefix mdlc: <http://the-qa-company.com/modelcompiler/> .
@prefix search: <http://www.openrdf.org/contrib/lucenesail#> .
@prefix cock: <http://vocabulary.semantic-web.at/cocktail-ontology/> .

# Describe custom strings for the mdlc:parsedString format, will be available with ${key}
mdlc:main mdlc:parsedStringParam [ mdlc:paramKey "luceneEvalMode" ; mdlc:paramValue "NATIVE" ] .
mdlc:main mdlc:parsedStringParam [ mdlc:paramKey "luceneWktFields" ; mdlc:paramValue "http://nuts.de/geometry https://linkedopendata.eu/prop/direct/P127" ] .

# Describe the main node to use: _:mainNode chainNode
mdlc:main mdlc:node _:mainNode .

_:mainNode mdlc:type mdlc:linkedSailNode ;
           mdlc:node _:singleNode, _:multiTypeFilter .

# all 
# cock:Ingredients
# cock:Cocktail

# Filter between types
_:multiTypeFilter mdlc:type mdlc:multiFilterNode;
                  mdlc:node [
                    mdlc:node _:Ingredients;
                    mdlc:typeFilterObject cock:Ingredients
                  ], [
                    mdlc:node _:Cocktail;
                    mdlc:typeFilterObject cock:Cocktail
                  ];
                  mdlc:typeFilterPredicate rdf:type.

_:Ingredients mdlc:dirLocation "${locationNative}lucene_mt/Ingredients"^^mdlc:parsedString;
  mdlc:luceneEvalMode "NATIVE";
  mdlc:luceneReindexQuery "SELECT ?s ?p ?o WHERE { ?s a <http://vocabulary.semantic-web.at/cocktail-ontology/Ingredients> ; ?p ?o .   FILTER (?p = rdfs:label) }  ";
  mdlc:type mdlc:luceneNode;
  mdlc:luceneParam [
    mdlc:paramKey "maxDocuments" ;
    mdlc:paramValue "5000" ;
  ] ;
  search:indexid cock:Ingredients .


_:Cocktail mdlc:dirLocation "${locationNative}lucene_mt/Cocktail"^^mdlc:parsedString;
  mdlc:luceneEvalMode "NATIVE";
  mdlc:luceneReindexQuery "SELECT ?s ?p ?o WHERE { ?s a <http://vocabulary.semantic-web.at/cocktail-ontology/Cocktail> ; ?p ?o .  FILTER (?p = rdfs:label)}  ";
  mdlc:type mdlc:luceneNode;
  mdlc:luceneParam [
    mdlc:paramKey "maxDocuments" ;
    mdlc:paramValue "5000" ;
  ] ;
  search:indexid cock:Cocktail .



_:singleNode mdlc:type mdlc:luceneNode ;
            # Describe the location of the lucene directory, you can use mdlc:parsedString for template strings
            mdlc:dirLocation "${locationNative}lucene_u1"^^mdlc:parsedString ;
            # Define custom parameters, here the wkt fields for Geo-SPARQL
            mdlc:luceneParam [
                mdlc:paramKey "wktFields" ;
                mdlc:paramValue "${luceneWktFields}"^^mdlc:parsedString ;
            ] ;
            # Define the reindex query for the lucene sail, the query should be ordered by ?s
            mdlc:luceneReindexQuery "SELECT * {?s ?p ?o . FILTER(?p = rdfs:label). } order by ?s" ;
            # Describe the evaluation mode of the queries, for native or endpointStore storage, use NATIVE
            mdlc:luceneEvalMode "${luceneEvalMode}"^^mdlc:parsedString;
            search:indexid cock:All.
